#+title: 工作用文本编辑器的选择于配置
#+author: 黄耀庭
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el :mkdirp yes
#+PROPERTY: header-args:latex :exports code

* 起源
* Emacs
** 开始
*** EMACS CUSTOM
在载入颜色主题和 package 时, emacs 会在 init.el 里自动创建配置代码, 这里提前载入这些  
#+begin_src emacs-lisp
(setq custom-file "~/.config/emacs/custom.el")
(load custom-file)
#+end_src
*** Native Comp
#+begin_src emacs-lisp
(setq package-native-compile t)
#+end_src
*** 设置个人信息
设置个人信息; 其中邮箱主要用于gpg加密相关进程
#+begin_src emacs-lisp
(setq user-full-name "黄耀庭"
      user-mail-address "dariush4691@outlook.com")
#+end_src
*** 设置字体
设置字体, 注意如果emacs使用守护进程的方式启动, 需要使用把字体设置加入HOOK中
#+begin_src emacs-lisp
(defvar darius/default-font-size 200)
(defun darius/set-font ()
  (set-face-attribute 'default nil :font "更纱黑体 Mono SC Nerd" :height darius/default-font-size)
  (set-face-attribute 'variable-pitch nil :font "思源宋体" :height darius/default-font-size :weight 'regular)
  (set-face-attribute 'fixed-pitch nil :font "更纱黑体 Mono SC Nerd" :height darius/default-font-size :weight 'regular))
(if (daemonp)
    (add-hook 'server-after-make-frame-hook #'darius/set-font)
    (darius/set-font))
#+end_src

*** 代理设置
#+begin_src emacs-lisp
(defun darius/toggle-proxy ()
  (interactive)
  (if (getenv "http_proxy")
      (progn (setenv "http_proxy" nil)
	     (setenv "https_proxy" nil)
	     (message "Proxy Off"))
      (progn (setenv "http_proxy" "http://127.0.0.1:1087")
	     (setenv "https_proxy" "http://127.0.0.1:1087")
	     (message "Proxy On"))))
#+end_src

*** 软件源设置
由于中国大陆地区访问 melpa 比较慢, 因此使用国内镜像; 如果在公司网络, 无法正常访问外网, 也可以直接制作U盘镜像; 镜像大小约为 8G, 参见 [[https://elpamirror.emacs-china.org][Emacs中国镜像]] 
#+begin_src emacs-lisp
(require 'package) ; This should be autoloaded. I'm putting this line here just in case not.
(setq package-archives '(("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
			 ("org" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")
			 ("elpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")))
(unless package-archive-contents
 (package-refresh-contents))
#+end_src

*** 初始界面设置
初始界面为了照顾新人引入了很多不必要的界面元素, 这些界面元素包括
| 界面元素 | 相关参数                    | 说明                                             |
|----------+-----------------------------+--------------------------------------------------|
| 欢迎界面 | =inhibit-startup-message=   | 初始进入的问候界面; 如果关闭则会默认进入 scratch |
| 滚动条   | =scroll-bar-mode=           | 真的有程序员会看这个么?                          |
| 工具栏   | =tool-bar-mode=             | 提供的功能很少, 而且大部分时间遮挡视野           |
| 工具提示 | =tooltip-mode=              | 把鼠标放在工具栏上, 一段时间后出现的提示         |
| 页面边距 | =set-fringe-mode=           | 代码和左边框的最小距离, 建议适当增大             |
| 菜单栏   | =menu-bar-mode=             | 前期可以保留; 后期用熟快捷键可以去除             |
| 警告声   | =visible-bell=              | 可以使用视觉警告方式                             |
| 显示行号 | ~display-line-numbers-mode~ | 显示行号                                         |

为了使可编程区域更大, 建议做出如下调整:
#+begin_src emacs-lisp
(setq inhibit-startup-message t
      visible-bell t)       ; do not sound the bell. Instead, use visual blink
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(menu-bar-mode -1)          ; Disable the menu bar
(when (display-graphic-p)
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (set-fringe-mode 10))       ; Give some breathing room, modify the spacing 
  
;; add leftside line number when in coding mode
(add-hook 'prog-mode-hook #'display-line-numbers-mode) ; display line number in program-mode
#+end_src

*** 快捷键设置
#+begin_src emacs-lisp
(global-set-key (kbd "C-; c") 'calendar)
(global-set-key (kbd "C-; t") 'darius/toggle-proxy)
#+end_src

** 提升编辑操作体验
*** 自动匹配括号
#+begin_src emacs-lisp
(electric-pair-mode)        ; toggle auto-pair-mode
#+end_src

*** VIM 模拟器
emacs 本生利用 ~Ctrl~, ~Meta~ 键的文本移动框选操作使用体验较差; 这里使用 emacs 的 Vim 模拟器. 如果像要退出 ~evil-mode~, 则在任意状态按下 ~C-z~ 即可.
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :demand t
  :bind (("<escape>" . keyboard-escape-quit))
  :custom
  (evil-want-keybinding nil)
  (evil-search-module 'evil-search)
  (evil-undo-system 'undo-redo)
  :config
  (evil-mode 1)
  (evil-set-leader 'normal (kbd "SPC"))
  (evil-set-leader 'normal "\\" t))
#+end_src

**** Vim插件替代
***** Vim surrond
用于快速更改括号; 例如 ~ys[text object](~ 用来给一个文本对象加上括号; ~ds(~ 删除括号; ~cs(~ 更改括号.
#+begin_src emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+end_src

**** Evil增强插件
#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :after evil
  :config
  (evil-collection-init))
#+end_src

** 减轻大脑负担
*** 使用主题
#+begin_src emacs-lisp
(use-package gruvbox-theme
  :after evil
  :config
  (load-theme 'gruvbox))
#+end_src

*** 状态栏
#+begin_src emacs-lisp
(use-package all-the-icons)
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom
  (doom-modeline-height 15)
  (doom-modeline-modal-icon nil))
(use-package nyan-mode
  :ensure t
  :init (nyan-mode))
#+end_src

*** 彩虹括号
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] 用于为每一级括号染上不同的颜色, 在 LISP 类的语言中非常有用. 
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** 快捷键提示
[[https://github.com/justbur/emacs-which-key][which-key]] 用于在输入快捷键 *序列* 时, 提示当前可用的 *后续* 快捷键. 该软件包还提供了一个函数 =which-key-show-top-level= 用来直接显示当前的快捷键. 为了方便起见, 将这个函数映射为 ~C-h SPC~ 以便在特殊buffer中显示当前可用快捷键; 此外, 如果涉及的快捷键太多, 可以使用 ~C-h n~ 和 ~C-h p~ 上下翻页.
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init (which-key-mode)
  :diminish which-key-mode
  :bind ("C-h SPC" . #'which-key-show-top-level)
  :custom (which-key-idel-delay 1))
#+end_src

*** MINIBUFFER补全
#+begin_src emacs-lisp
;;;Vertical is for simple completion
(use-package vertico
  :config
  (vertico-mode))
#+end_src

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :after evil
  :bind (:map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         :map ivy-switch-buffer-map
         ("TAB" . ivy-alt-done)	
         ("C-k" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffeers t)
  (setq enable-recursive-minibuffers t))

(use-package counsel
  :after (evil ivy)
  :bind (("M-x" . counsel-M-x)
         ("C-s" . swiper)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
	 ("C-h f" . counsel-describe-function)
	 ("C-h v" . counsel-describe-variable)
	 ("C-h o" . counsel-describe-symbol)
	 ("C-; ?". counsel-rg)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)
	 :map counsel-find-file-map
	 ("C-d" . 'ivy-immediate-done)))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1)) 

(use-package ivy-rich
  :ensure t
  :after (ivy counsel)
  :init (ivy-rich-mode 1))
#+end_src

** 自动补全
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :bind ("C-; TAB" . #'company-mode)
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0)
  (evil-complete-next-func #'company-complete-common-or-cycle)
  :config
  (global-company-mode))

(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode))
#+end_src
** ORG-MODE
*** 快捷键设置
#+begin_src emacs-lisp
(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
(add-hook 'org-mode-hook #'org-indent-mode) ; add virtual indentation
#+end_src
*** 全局设置
#+begin_src emacs-lisp
(setq org-directory "~/org"
      org-agenda-files '("~/org/agenda.org" "~/org/notes.org")
      org-archive-location "~/org/archive.org::* From %s"
      org-default-notes-file "~/org/notes.org"
      org-qgenda-start-with-log-mode t
      org-log-done 'time
      org-log-into-drawer t
      org-edit-src-content-indentation 0
      org-confirm-babel-evaluate nil
      org-babel-lisp-eval-fn #'sly-eval
      org-highlight-latex-and-related '(native script entities))
(use-package mixed-pitch
  :hook (org-mode . mixed-pitch-mode))
#+end_src

*** BABEL
#+begin_src emacs-lisp
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (lua . t)
   (gnuplot . t)
   (dot . t)
   (plantuml . t)
   (latex . t)
   (shell . t)
   (scheme . t)
   (lisp . t)
   (haskell . t)
   (emacs-lisp . t)))
(use-package gnuplot :ensure t)
(use-package sly :ensure t)
(use-package plantuml-mode :ensure t)
(use-package lua-mode :ensure t)
(use-package geiser :ensure t)
(use-package geiser-racket :ensure t)
;;(use-package racket-mode)
(use-package haskell-mode :ensure t)
(use-package graphviz-dot-mode :ensure t)
#+end_src

*** ROAM
#+begin_src emacs-lisp
;; Here's a very basic sample for configuration of org-roam using use-package:
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "~/org-roam"))
  :bind (("C-; l" . org-roam-buffer-toggle)
         ("C-; f" . org-roam-node-find)
         ("C-; g" . org-roam-graph)
         ("C-; i" . org-roam-node-insert)
         ("C-; c" . org-roam-capture)
         ;; dailies
         ("C-; j" . org-roam-dailies-capture-today))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))
#+end_src

*** Drag-and-Drop
#+begin_src emacs-lisp
(use-package org-download
  :ensure t
  :custom
  (org-download-image-dir "~/org/imgs/downloads/")
  :bind (("C-; p" . 'org-download-clipboard))
  :hook (dired-mode . org-download-enable)
  :init
  (require 'org-download))
#+end_src

** LATEX
*** AUCTex
#+begin_src emacs-lisp
(use-package tex
  :ensure auctex)
#+end_src

*** CDLaTeX
#+begin_src emacs-lisp
;; latex
(use-package cdlatex
  :ensure t
  :bind (:map cdlatex-mode-map
	 ("C-c C-{" . nil)
	 ("C-c C-," . cdlatex-environment))
  :hook (LaTeX-mode . cdlatex-mode))
(use-package auctex-latexmk
  :ensure t
  :config
  (auctex-latexmk-setup))
(use-package evil-tex
  :ensure t
  :hook (LaTeX-mode . evil-tex-mode))
(add-hook 'LaTeX-mode-hook 'turn-on-auto-fill) ; 在latex模式下输入文字自动换行
#+end_src
** 软件
*** 输入法
#+begin_src emacs-lisp
(use-package posframe :ensure t)

(use-package pyim
  :ensure t
  :custom
  (pyim-page-tooltip '(posframe popup minibuffer))
  (pyim-punctuation-translate-p '(no auto yes)) ;全角半角问题
  (pyim-punctuation-dict nil) ;全角半角问题
  (default-input-method "pyim")
  :config
  (pyim-default-scheme 'xiaohe-shuangpin)
  (pyim-extra-dicts-add-dict
    `(:name "Greatdict"
      :file "~/.config/emacs/pyim-greatdict.pyim.gz"
      :coding utf-8-unix
      :dict-type pinyin-dict)))
#+end_src
*** 文件管理器
#+begin_src emacs-lisp
;; 文件管理器
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))

;; keep only one dired instance
(use-package dired-single
  :ensure t
  :commands (dired dired-jump))

(use-package all-the-icons-dired
  :ensure t
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-hide-dotfiles
  :ensure t
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))
#+end_src
*** Feed
#+begin_src emacs-lisp
(use-package elfeed
  :ensure t
  :bind (("C-; C-; e" . elfeed)
	 ("C-; C-; C-e" . elfeed-update))
  :config
  (setq elfeed-feeds
	'(("https://rsshub.app/sspai/matrix" tech)
	  ("https://medium.com/feed/towards-data-science" tech paywall)
	  ("https://rss.lilydjwg.me/zhihuzhuanlan/operations-research" tech) 
	  ("https://rsshub.app/guokr/scientific" tech)
	  ("https://planet.emacslife.com/atom.xml" dev)
	  ("http://planet.lisp.org/rss20.xml" dev)
	  ("https://rsshub.app/proletar" life)
	  ("https://rsshub.app/caixin/latest" news)
	  ("http://feeds.feedburner.com/tinybuddha" life)))
  (setq browse-url-browser-function 'eww-browse-url))
#+end_src
*** Snippet
#+begin_src emacs-lisp
(use-package yasnippet-snippets :ensure t)
(use-package yasnippet
  :ensure t
  :bind (("C-; s" . 'yas-insert-snippet))
  :config
  (yas-global-mode 1))
#+end_src
*** 网易云音乐
#+begin_src emacs-lisp
(use-package netease-cloud-music
  :ensure t
  :bind (("C-; C-; m" .  'netease-cloud-music-pause-or-continue)
	 ("C-; C-; n" .  'netease-cloud-music-play-next-song)
	 ("C-; C-; p" .  'netease-cloud-music-play-previous-song)
	 ("C-; C-; f" .  'netease-cloud-music-search-song)))
#+end_src
** 软件试验场
#+begin_src emacs-lisp
(use-package ggtags :ensure t)
(use-package call-graph
  :ensure t
  :config
  (evil-define-key 'normal call-graph-mode-map
    "zR" 'cg-widget-expand-all
    "zM" 'cg-widget-collapse-all
    "k" 'widget-backward
    "j" 'widget-forward
    "q" 'cg-quit
    "+" 'cg-expand
    "_" 'cg-collapse
    "o" 'cg-goto-file-at-point
    "g" 'cg-at-point
    "d" 'cg-remove-caller
    "l" 'cg-select-caller-location
    "r" 'cg-reset-caller-cache
    "t" 'cg-toggle-show-func-args
    "f" 'cg-toggle-invalid-reference
    (kbd "<RET>") 'cg-goto-file-at-point))
(use-package pdf-tools)
#+end_src
*** 快捷键列表
| 按键  | 函数                          |
|-------+-------------------------------|
| C-c l | org-store-link                |
| C-c a | org-agenda                    |
| C-c c | org-acpture                   |
| C-; l | org-roam-buffer-toggle        |
| C-; f | org-roam-node-find            |
| C-; g | org-roam-node-insert          |
| C-; c | org-roam-capture              |
| C-; j | org-roam-dailies-capture-tody |
| C-; p | org-download-clipboard        |

** 开发
*** devdocs
#+begin_src emacs-lisp
(use-package devdocs
  :ensure t
  :bind ("C-; K" . 'devdocs-lookup))
#+end_src
** 语言服务器支持
*** LSP
AKA =language server protocal=
#+begin_src emacs-lisp
(defun darius/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . darius/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-; C-l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))
#+end_src
*** LSP-UI
[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which
make Emacs feel even more like an IDE.  Check out the screenshots on
the =lsp-ui= homepage (linked at the beginning of this paragraph) to
see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src
*** LSP-IVY
[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for
things by name in your code.  When you run these commands, a prompt
will appear in the minibuffer allowing you to type part of the name of
a symbol in your code.  Results will be populated in the minibuffer so
that you can find what you're looking for and jump to that location in
the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src
* Research Tool
** Scihub
#+begin_src emacs-lisp
(use-package scihub
  :ensure t
  :custom
  (scihub-download-direcotry "~/papers/")
  (scihub-open-after-download t)
  (scihub-fetch-domains 'scihub-fetch-domains-lovescihub))
#+end_src

* LATEX
** 如何制作一个 =cls= 模板
自己新建的Latex模板需要放在特定文件夹下, 从而可以被 =\documentclass= 找到:
- unix: =~/texmf/tex/latex/[任意]/[自定义模板名].cls=
*** 指定文件路经
You could create a folder below your TeX home directory and put your .sty file therein. Use this command at the command prompt to find out where:
#+begin_src shell
kpsewhich -var-value=TEXMFHOME
#+end_src

*** 文件头申明
Latex 模板需要包含如字段, 一般
| 标志           | 值        | 说明                                       |
|----------------+-----------+--------------------------------------------|
| NeedsTexFormat | LaTeX2e   | 可以使用当前cls的latex版本                 |
| ProcidesClass  | myscratcl | cls的名称, 需要于文件名保持一致            |
| LoadClass      | scrartcl  | 载入其它的class, 方便在其它class之上做修改 |
#+begin_src latex :tangle ~/texmf/tex/latex/darius/myscrartcl.cls :mkdirp yes
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{myscratcl}
\LoadClass[
  english,
  paper=a4,
  ,captions=tableheading
]{scrartcl}
#+end_src

#+begin_src latex :tangle ~/texmf/tex/latex/darius/myscrartcl.cls :mkdirp yes
\RequirePackage{amsmath} % for math
\RequirePackage{amssymb} % for math
\RequirePackage{lmodern} % for loading high quality fonts.
\RequirePackage{xcolor} % provided the define color macro

\RequirePackage{setspace} % set space
\setstretch{1.2}
% The fllowing three commands rely on xelatex according to the
% Eisvogel pandoc Latex Template
\RequirePackage{unicode-math}
\defaultfontfeatures{Scale=MatchLowercase}
\defaultfontfeatures[\rmfamily]{Ligatures=TeX,Scale=1}

\RequirePackage{upquote}
\RequirePackage{microtype}
\UseMicrotypeSet[protrusion]{basicmath} % disable protrusion for tt fonts

\makeatletter
\KOMAoptions{parskip=half}
\makeatother

\definecolor{default-linkcolor}{HTML}{A50000}
\definecolor{default-filecolor}{HTML}{A50000}
\definecolor{default-citecolor}{HTML}{4077C0}
\definecolor{default-urlcolor}{HTML}{4077C0}

\RequirePackage{xurl}
\RequirePackage{bookmark}

% Options for packages loaded elsewhere. I don't know what these does,
% however just copying frmo the eisvogel template
\PassOptionsToPackage{unicode}{hyperref}
\PassOptionsToPackage{hyphens}{url}
\PassOptionsToPackage{dvipsnames,svgnames,x11names,table}{xcolor}

\RequirePackage{listings} % provided code block and highlight

% Since our documents might includes code blocks, we need to make it
% prettier. The default listing color is black and white with
% different font faces to distinguish keywords. I use ayu color theme.
\definecolor{listing-background}{HTML}{FFFFFF}
\definecolor{listing-rule}{HTML}{D9D8D7}
\definecolor{listing-numbers}{HTML}{D9D8D7}
\definecolor{listing-text-color}{HTML}{5C6773}
\definecolor{listing-keyword}{HTML}{F29718}
\definecolor{listing-keyword-2}{HTML}{A37ACC} % additional keywords
\definecolor{listing-keyword-3}{HTML}{E7C547} % additional keywords
\definecolor{listing-identifier}{HTML}{36A3D9}
\definecolor{listing-string}{HTML}{86B300}
\definecolor{listing-comment}{HTML}{ABB0B6}
% I don't know how to define a listing style, so I just copy the
% listing style from the eisvogel pandoc templates.
\lstdefinestyle{ayu}{
  language         = java,
  numbers          = left,
  xleftmargin      = 2.7em,
  framexleftmargin = 2.5em,
  backgroundcolor  = \color{listing-background},
  basicstyle       = \color{listing-text-color}\linespread{1.0}%
                      \lst@ifdisplaystyle%
                      \small%
                      \fi\ttfamily{},
  breaklines       = true,
  frame            = single,
  framesep         = 0.19em,
  rulecolor        = \color{listing-rule},
  frameround       = ffff,
  tabsize          = 4,
  numberstyle      = \color{listing-numbers},
  aboveskip        = 1.0em,
  belowskip        = 0.1em,
  abovecaptionskip = 0em,
  belowcaptionskip = 1.0em,
  keywordstyle     = {\color{listing-keyword}\bfseries},
  keywordstyle     = {[2]\color{listing-keyword-2}\bfseries},
  keywordstyle     = {[3]\color{listing-keyword-3}\bfseries\itshape},
  sensitive        = true,
  identifierstyle  = \color{listing-identifier},
  commentstyle     = \color{listing-comment},
  stringstyle      = \color{listing-string},
  showstringspaces = false,
  escapeinside     = {/*@}{@*/}, % Allow LaTeX inside these special comments
  literate         =
  {á}{{\'a}}1 {é}{{\'e}}1 {í}{{\'i}}1 {ó}{{\'o}}1 {ú}{{\'u}}1
  {Á}{{\'A}}1 {É}{{\'E}}1 {Í}{{\'I}}1 {Ó}{{\'O}}1 {Ú}{{\'U}}1
  {à}{{\`a}}1 {è}{{\'e}}1 {ì}{{\`i}}1 {ò}{{\`o}}1 {ù}{{\`u}}1
  {À}{{\`A}}1 {È}{{\'E}}1 {Ì}{{\`I}}1 {Ò}{{\`O}}1 {Ù}{{\`U}}1
  {ä}{{\"a}}1 {ë}{{\"e}}1 {ï}{{\"i}}1 {ö}{{\"o}}1 {ü}{{\"u}}1
  {Ä}{{\"A}}1 {Ë}{{\"E}}1 {Ï}{{\"I}}1 {Ö}{{\"O}}1 {Ü}{{\"U}}1
  {â}{{\^a}}1 {ê}{{\^e}}1 {î}{{\^i}}1 {ô}{{\^o}}1 {û}{{\^u}}1
  {Â}{{\^A}}1 {Ê}{{\^E}}1 {Î}{{\^I}}1 {Ô}{{\^O}}1 {Û}{{\^U}}1
  {œ}{{\oe}}1 {Œ}{{\OE}}1 {æ}{{\ae}}1 {Æ}{{\AE}}1 {ß}{{\ss}}1
  {ç}{{\c c}}1 {Ç}{{\c C}}1 {ø}{{\o}}1 {å}{{\r a}}1 {Å}{{\r A}}1
  {€}{{\EUR}}1 {£}{{\pounds}}1 {«}{{\guillemotleft}}1
  {»}{{\guillemotright}}1 {ñ}{{\~n}}1 {Ñ}{{\~N}}1 {¿}{{?`}}1
  {…}{{\ldots}}1 {≥}{{>=}}1 {≤}{{<=}}1 {„}{{\glqq}}1 {“}{{\grqq}}1
  {”}{{''}}1
}
\lstset{style=ayu}
#+end_src
** ElegantPaper
#+begin_src latex :tangle ~/texmf/tex/latex/darius/myelegantpaper.cls :mkdirp yes
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{myelegantpaper}
\LoadClass[lang=cn,11pt,a4paper,cite=authoryear,fontset=none]{elegantpaper}
\setCJKmainfont[BoldFont={FZHTK--GBK1-0},ItalicFont={FZKTK--GBK1-0}]{FZSSK--GBK1-0}
\setCJKsansfont[BoldFont={FZHTK--GBK1-0},ItalicFont={FZHTK--GBK1-0}]{FZHTK--GBK1-0}
\setCJKmonofont[BoldFont={FZHTK--GBK1-0},ItalicFont={FZHTK--GBK1-0}]{FZFSK--GBK1-0}
\setCJKfamilyfont{zhsong}{FZSSK--GBK1-0}
\setCJKfamilyfont{zhhei}{FZHTK--GBK1-0}
\setCJKfamilyfont{zhkai}{FZKTK--GBK1-0}
\setCJKfamilyfont{zhfs}{FZFSK--GBK1-0}
\newcommand*{\songti}{\CJKfamily{zhsong}}
\newcommand*{\heiti}{\CJKfamily{zhhei}}
\newcommand*{\kaishu}{\CJKfamily{zhkai}}
\newcommand*{\fangsong}{\CJKfamily{zhfs}}
#+end_src
